
export function initPackages(app) {
    const packagesSection = document.querySelector('[data-component="packages"]');
    if (!packagesSection) return;

    packagesSection.innerHTML = `
    <div class="section-inner">
      <h2>–ü–∞–∫–µ—Ç—ã —É—Å–ª—É–≥</h2>
      <p class="subtitle">–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è –≤–∞—à–µ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞</p>
      <div class="packages-container" id="packages-container"></div>
      <div id="package-selection" class="hidden">
        <!-- Selection –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–æ –∑–¥–µ—Å—å -->
      </div>
    </div>
  `;

    renderPackages(app);
    initPackageHandlers(app);
}

function renderPackages(app) {
    const container = document.getElementById('packages-container');
    if (!container) return;

    container.innerHTML = app.packages.map(pkg => `
    <div class="package-card ${pkg.id}" data-package="${pkg.id}">
      <h3 class="package-title">${pkg.name}</h3>
      <div class="package-price">${pkg.price.toLocaleString('ru-RU')} ‚ÇΩ</div>
      <ul class="package-features">
        ${pkg.features.map(feature => `<li>${feature}</li>`).join('')}
      </ul>
      <button class="package-button select-package" data-package="${pkg.id}">
        ${pkg.id === 'custom' ? '–°–æ–±—Ä–∞—Ç—å —Å–≤–æ–π –ø–∞–∫–µ—Ç' : '–í—ã–±—Ä–∞—Ç—å –ø–∞–∫–µ—Ç'}
      </button>
    </div>
  `).join('');
}

function initPackageHandlers(app) {
    document.addEventListener('click', (e) => {
        if (e.target.classList.contains('select-package')) {
            const packageType = e.target.dataset.package;
            handlePackageSelect(app, packageType);
        }
    });
}

function handlePackageSelect(app, packageType) {
    console.log('Package selected:', packageType);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.state.currentPackage = packageType;
    updateSelectionLimits(app, packageType);

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞
    showPackageSelection();

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤—ã–±–æ—Ä —É—Å–ª—É–≥
    initSelectionComponent(app);

    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    app.updateUI();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –¥—Ä—É–≥–∏—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
    document.dispatchEvent(new CustomEvent('packageSelected', {
        detail: packageType
    }));
}

function updateSelectionLimits(app, packageType) {
    const limits = {
        basic: { characters: 1, shows: 0, master: 1 },
        standard: { characters: 2, shows: 1, master: 0 },
        premium: { characters: 3, shows: 2, master: 1 },
        custom: { characters: 99, shows: 99, master: 99 }
    };

    const limit = limits[packageType] || limits.custom;
    app.state.maxCharacters = limit.characters;
    app.state.maxShows = limit.shows;
    app.state.maxMasterClasses = limit.master;
}

function showPackageSelection() {
    const packageSelection = document.getElementById('package-selection');
    if (packageSelection) {
        packageSelection.classList.remove('hidden');
        packageSelection.classList.add('active');
        console.log('Showing package selection');

        setTimeout(() => {
            packageSelection.scrollIntoView({
                behavior: 'smooth',
                block: 'start'
            });
        }, 300);
    } else {
        console.error('Package selection element not found!');
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ –≤—ã–±–æ—Ä–∞
function initSelectionComponent(app) {
    const packageSelection = document.getElementById('package-selection');
    if (!packageSelection) return;

    // –†–µ–Ω–¥–µ—Ä–∏–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –≤—ã–±–æ—Ä–∞ –≤ —Å—Ç–∏–ª–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–∫—Ä–∏–ø—Ç–∞
    packageSelection.innerHTML = `
        <div class="section-inner">
            <div class="selected-package-info">
                <h3>–í—ã–±—Ä–∞–Ω –ø–∞–∫–µ—Ç: <span id="selected-package-name">${getPackageName(app.state.currentPackage)}</span></h3>
                <p>–í—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å –¥–æ <span id="max-characters">${app.state.maxCharacters}</span> –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, 
                   –¥–æ <span id="max-shows">${app.state.maxShows}</span> —à–æ—É-–ø—Ä–æ–≥—Ä–∞–º–º –∏ 
                   –¥–æ <span id="max-master">${app.state.maxMasterClasses}</span> –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤</p>
                <div class="total-price">–ò—Ç–æ–≥–æ: <span id="total-price">0</span>‚ÇΩ</div>
            </div>

            <!-- –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ -->
            <div class="selection-section">
                <h3 class="selection-section-title">
                    üé≠ –ü–µ—Ä—Å–æ–Ω–∞–∂–∏ 
                    <span class="selected-count" id="characters-count">0</span>/<span id="max-characters-display">${app.state.maxCharacters}</span>
                </h3>
                <div class="selection-navigation">
                    <button class="carousel-nav" id="characters-prev">‚Äπ</button>
                    <div class="character-carousel-container">
                        <div class="character-carousel" id="characters-slider"></div>
                    </div>
                    <button class="carousel-nav" id="characters-next">‚Ä∫</button>
                </div>
            </div>

            <!-- –®–æ—É-–ø—Ä–æ–≥—Ä–∞–º–º—ã -->
            <div class="selection-section">
                <h3 class="selection-section-title">
                    üé™ –®–æ—É-–ø—Ä–æ–≥—Ä–∞–º–º—ã 
                    <span class="selected-count" id="shows-count">0</span>/<span id="max-shows-display">${app.state.maxShows}</span>
                </h3>
                <div class="selection-navigation">
                    <button class="carousel-nav" id="shows-prev">‚Äπ</button>
                    <div class="show-carousel-container">
                        <div class="show-carousel" id="shows-slider"></div>
                    </div>
                    <button class="carousel-nav" id="shows-next">‚Ä∫</button>
                </div>
            </div>

            <!-- –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã -->
            <div class="selection-section">
                <h3 class="selection-section-title">
                    üé® –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã 
                    <span class="selected-count" id="master-count">0</span>/<span id="max-master-display">${app.state.maxMasterClasses}</span>
                </h3>
                <div class="selection-navigation">
                    <button class="carousel-nav" id="master-prev">‚Äπ</button>
                    <div class="master-carousel-container">
                        <div class="master-carousel" id="master-slider"></div>
                    </div>
                    <button class="carousel-nav" id="master-next">‚Ä∫</button>
                </div>
            </div>

            <!-- –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —É—Å–ª—É–≥ -->
            <div class="selected-services-preview">
                <div id="selected-services"></div>
            </div>

            <!-- –ö–Ω–æ–ø–∫–∞ –∑–∞–∫–∞–∑–∞ -->
            <div class="order-actions">
                <button class="cta-button" id="order-btn">–ó–∞–∫–∞–∑–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏</button>
            </div>
        </div>
    `;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ª–∞–π–¥–µ—Ä—ã
    initPackageSliders(app);
    initSelectionHandlers(app);
}

function initPackageSliders(app) {
    // –ü–µ—Ä—Å–æ–Ω–∞–∂–∏
    const charactersSlider = document.getElementById('characters-slider');
    if (charactersSlider) {
        charactersSlider.innerHTML = app.characters.map(character => {
            const isSelected = app.state.selectedCharacters.some(c => c.name === character.name);
            return `
                <div class="character-card ${isSelected ? 'selected' : ''}" data-name="${character.name}">
                    <img src="${character.image}" alt="${character.name}">
                    <div class="character-info">
                        <h4>${character.name}</h4>
                        <p>${character.description}</p>
                        ${app.state.currentPackage === 'custom' ? `<p class="price-tag">${app.data.customPrices.character}‚ÇΩ</p>` : ''}
                    </div>
                </div>
            `;
        }).join('');
    }

    // –®–æ—É-–ø—Ä–æ–≥—Ä–∞–º–º—ã
    const showsSlider = document.getElementById('shows-slider');
    if (showsSlider) {
        showsSlider.innerHTML = app.shows.map(show => {
            const isSelected = app.state.selectedShows.some(s => s.name === show.name);
            return `
                <div class="show-card ${isSelected ? 'selected' : ''}" data-name="${show.name}">
                    <img src="${show.image}" alt="${show.name}">
                    <div class="show-info">
                        <h4>${show.name}</h4>
                        <p>${show.description}</p>
                        ${app.state.currentPackage === 'custom' ? `<p class="price-tag">${app.data.customPrices.show}‚ÇΩ</p>` : ''}
                        <button class="view-btn" data-video="${show.video}" data-name="${show.name}">–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å</button>
                    </div>
                </div>
            `;
        }).join('');
    }

    // –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã
    const masterSlider = document.getElementById('master-slider');
    if (masterSlider) {
        masterSlider.innerHTML = app.masterClasses.map(master => {
            const isSelected = app.state.selectedMasterClasses.some(m => m.name === master.name);
            return `
                <div class="master-card ${isSelected ? 'selected' : ''}" data-name="${master.name}">
                    <div class="master-icon">${master.icon || 'üé®'}</div>
                    <h4>${master.name}</h4>
                    <p>${master.description}</p>
                    ${app.state.currentPackage === 'custom' ? `<p class="price-tag">${app.data.customPrices.master}‚ÇΩ</p>` : ''}
                </div>
            `;
        }).join('');
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫–∞—Ä—É—Å–µ–ª–∏
    initCarouselNavigation();
}

function initCarouselNavigation() {
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π
    document.getElementById('characters-prev')?.addEventListener('click', () => scrollCarousel('characters-slider', -220));
    document.getElementById('characters-next')?.addEventListener('click', () => scrollCarousel('characters-slider', 220));

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –¥–ª—è —à–æ—É
    document.getElementById('shows-prev')?.addEventListener('click', () => scrollCarousel('shows-slider', -220));
    document.getElementById('shows-next')?.addEventListener('click', () => scrollCarousel('shows-slider', 220));

    // –ù–∞–≤–∏–≥–∞—Ü–∏—è –¥–ª—è –º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤
    document.getElementById('master-prev')?.addEventListener('click', () => scrollCarousel('master-slider', -220));
    document.getElementById('master-next')?.addEventListener('click', () => scrollCarousel('master-slider', 220));
}

function scrollCarousel(id, amount) {
    const carousel = document.getElementById(id);
    if (carousel) {
        carousel.scrollBy({ left: amount, behavior: 'smooth' });
    }
}

function initSelectionHandlers(app) {
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
    document.addEventListener('click', (e) => {
        // –ü–µ—Ä—Å–æ–Ω–∞–∂–∏
        if (e.target.closest('.character-card')) {
            const card = e.target.closest('.character-card');
            if (e.target.closest('.view-btn')) return;

            const name = card.dataset.name;
            handleItemSelection(app, 'character', name, card);
        }

        // –®–æ—É-–ø—Ä–æ–≥—Ä–∞–º–º—ã
        if (e.target.closest('.show-card')) {
            const card = e.target.closest('.show-card');
            if (e.target.closest('.view-btn')) return;

            const name = card.dataset.name;
            handleItemSelection(app, 'show', name, card);
        }

        // –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã
        if (e.target.closest('.master-card')) {
            const card = e.target.closest('.master-card');
            const name = card.dataset.name;
            handleItemSelection(app, 'master', name, card);
        }

        // –ö–Ω–æ–ø–∫–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤–∏–¥–µ–æ
        if (e.target.classList.contains('view-btn')) {
            const videoUrl = e.target.dataset.video;
            const title = e.target.dataset.name;
            if (videoUrl) {
                showVideoModal(videoUrl, title);
            }
        }

        // –ö–Ω–æ–ø–∫–∞ –∑–∞–∫–∞–∑–∞
        if (e.target.id === 'order-btn') {
            handleOrder(app);
        }
    });
}

function handleItemSelection(app, type, name, card) {
    let selectedArray, maxLimit;

    switch(type) {
        case 'character':
            selectedArray = app.state.selectedCharacters;
            maxLimit = app.state.maxCharacters;
            break;
        case 'show':
            selectedArray = app.state.selectedShows;
            maxLimit = app.state.maxShows;
            break;
        case 'master':
            selectedArray = app.state.selectedMasterClasses;
            maxLimit = app.state.maxMasterClasses;
            break;
        default:
            return;
    }

    const index = selectedArray.findIndex(item => item.name === name);

    if (index === -1) {
        if (selectedArray.length < maxLimit || app.state.currentPackage === 'custom') {
            const data = getItemData(app, type, name);
            selectedArray.push({ name, price: data?.price || 0 });
            card.classList.add('selected');
            showNotification(`${getTypeLabel(type)} "${name}" –¥–æ–±–∞–≤–ª–µ–Ω`, 'success');
        } else {
            showNotification(`–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ –±–æ–ª–µ–µ ${maxLimit} ${getTypeLabel(type, true)}`, 'error');
        }
    } else {
        selectedArray.splice(index, 1);
        card.classList.remove('selected');
    }

    updateSelectionUI(app);
}

function getItemData(app, type, name) {
    switch(type) {
        case 'character':
            return app.characters.find(c => c.name === name);
        case 'show':
            return app.shows.find(s => s.name === name);
        case 'master':
            return app.masterClasses.find(m => m.name === name);
        default:
            return null;
    }
}

function getTypeLabel(type, plural = false) {
    const labels = {
        character: plural ? '–ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π' : '–ø–µ—Ä—Å–æ–Ω–∞–∂',
        show: plural ? '—à–æ—É-–ø—Ä–æ–≥—Ä–∞–º–º' : '—à–æ—É',
        master: plural ? '–º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å–æ–≤' : '–º–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å'
    };
    return labels[type] || '—ç–ª–µ–º–µ–Ω—Ç';
}

function updateSelectionUI(app) {
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    document.getElementById('characters-count').textContent = app.state.selectedCharacters.length;
    document.getElementById('shows-count').textContent = app.state.selectedShows.length;
    document.getElementById('master-count').textContent = app.state.selectedMasterClasses.length;

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
    updateSelectedServicesPreview(app);

    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å
    updateTotalPrice(app);
}

function updateSelectedServicesPreview(app) {
    const preview = document.getElementById('selected-services');
    if (!preview) return;

    let html = '<h4>–í—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏:</h4><div class="selected-items-preview">';

    // –ü–∞–∫–µ—Ç
    html += `
        <div class="selected-item-card">
            <div class="selected-item-img" style="background: rgba(214, 196, 155, 0.2); display: flex; align-items: center; justify-content: center;">
                <span style="font-size: 2rem;">üì¶</span>
            </div>
            <div class="selected-item-name">${getPackageName(app.state.currentPackage)}</div>
            <div class="remove-item-btn" onclick="removePackage()">√ó</div>
        </div>
    `;

    // –ü–µ—Ä—Å–æ–Ω–∞–∂–∏
    app.state.selectedCharacters.forEach(char => {
        const character = app.characters.find(c => c.name === char.name);
        html += `
            <div class="selected-item-card">
                <img src="${character.image}" alt="${char.name}" class="selected-item-img">
                <div class="selected-item-name">${char.name}</div>
                ${app.state.currentPackage === 'custom' ? `<div class="price-tag">${app.data.customPrices.character}‚ÇΩ</div>` : ''}
                <div class="remove-item-btn" onclick="removeSelectedItem('character', '${char.name}')">√ó</div>
            </div>
        `;
    });

    // –®–æ—É-–ø—Ä–æ–≥—Ä–∞–º–º—ã
    app.state.selectedShows.forEach(show => {
        const showData = app.shows.find(s => s.name === show.name);
        html += `
            <div class="selected-item-card">
                <img src="${showData.image}" alt="${show.name}" class="selected-item-img">
                <div class="selected-item-name">${show.name}</div>
                ${app.state.currentPackage === 'custom' ? `<div class="price-tag">${app.data.customPrices.show}‚ÇΩ</div>` : ''}
                <div class="remove-item-btn" onclick="removeSelectedItem('show', '${show.name}')">√ó</div>
            </div>
        `;
    });

    // –ú–∞—Å—Ç–µ—Ä-–∫–ª–∞—Å—Å—ã
    app.state.selectedMasterClasses.forEach(master => {
        const masterData = app.masterClasses.find(m => m.name === master.name);
        html += `
            <div class="selected-item-card">
                <div class="selected-item-img" style="background: rgba(214, 196, 155, 0.2); display: flex; align-items: center; justify-content: center; font-size: 2rem;">
                    ${masterData.icon}
                </div>
                <div class="selected-item-name">${master.name}</div>
                ${app.state.currentPackage === 'custom' ? `<div class="price-tag">${app.data.customPrices.master}‚ÇΩ</div>` : ''}
                <div class="remove-item-btn" onclick="removeSelectedItem('master', '${master.name}')">√ó</div>
            </div>
        `;
    });

    html += '</div>';
    preview.innerHTML = html;

    // –î–æ–±–∞–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
    window.removePackage = function() {
        removePackage(app);
    };

    window.removeSelectedItem = function(type, name) {
        removeSelectedItem(app, type, name);
    };
}

function updateTotalPrice(app) {
    const totalPriceElement = document.getElementById('total-price');
    if (!totalPriceElement) return;

    let total = 0;

    if (app.state.currentPackage === 'custom') {
        total += app.state.selectedCharacters.length * app.data.customPrices.character;
        total += app.state.selectedShows.length * app.data.customPrices.show;
        total += app.state.selectedMasterClasses.length * app.data.customPrices.master;
    } else {
        // –î–ª—è —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é —Ü–µ–Ω—É
        const packagePrices = {
            basic: 10000,
            standard: 35000,
            premium: 55000
        };
        total = packagePrices[app.state.currentPackage] || 0;
    }

    totalPriceElement.textContent = total.toLocaleString('ru-RU');
}

function showVideoModal(videoUrl, title) {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –≤–∏–¥–µ–æ
    console.log('Show video:', videoUrl, title);
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∫–∞–∑–∞ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
}

function showNotification(message, type) {
    // –†–µ–∞–ª–∏–∑–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    console.log(`${type}: ${message}`);
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
}

function handleOrder(app) {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫–∞–∑–∞
    console.log('Order placed:', app.state);
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–∫–∞–∑–∞
}

export function removePackage(app) {
    app.state.currentPackage = null;
    app.state.selectedCharacters = [];
    app.state.selectedShows = [];
    app.state.selectedMasterClasses = [];
    app.state.selectedProducts = [];
    app.state.selectedAdditionalServices = [];

    // –°–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ü–∏—é –≤—ã–±–æ—Ä–∞
    const packageSelection = document.getElementById('package-selection');
    if (packageSelection) {
        packageSelection.classList.remove('active');
        packageSelection.classList.add('hidden');
        packageSelection.innerHTML = '';
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    document.dispatchEvent(new CustomEvent('selectionUpdated'));
}

export function removeSelectedItem(app, type, identifier) {
    if (type === 'character') {
        const index = app.state.selectedCharacters.findIndex(c => c.name === identifier);
        if (index !== -1) app.state.selectedCharacters.splice(index, 1);
    } else if (type === 'show') {
        const index = app.state.selectedShows.findIndex(s => s.name === identifier);
        if (index !== -1) app.state.selectedShows.splice(index, 1);
    } else if (type === 'master') {
        const index = app.state.selectedMasterClasses.findIndex(m => m.name === identifier);
        if (index !== -1) app.state.selectedMasterClasses.splice(index, 1);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    updateSelectionUI(app);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–µ–∫
    const card = document.querySelector(`[data-name="${identifier}"]`);
    if (card) {
        card.classList.remove('selected');
    }
}

export function getPackageName(packageType) {
    const packageNames = {
        basic: '–ë–∞–∑–æ–≤—ã–π',
        standard: '–°—Ç–∞–Ω–¥–∞—Ä—Ç',
        premium: '–ü—Ä–µ–º–∏—É–º',
        custom: '–ö–∞—Å—Ç–æ–º–Ω—ã–π'
    };
    return packageNames[packageType] || '–ü–∞–∫–µ—Ç —É—Å–ª—É–≥';
}
